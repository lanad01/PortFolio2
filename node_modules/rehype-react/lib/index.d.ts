/**
 * @type {import('unified').Plugin<[Options], Root, ReactElement>}
 */
export default function rehypeReact(options: Options): void
export type Root = import('hast').Root
export type Element = import('hast').Element
export type ReactNode = import('react').ReactNode
export type ReactElement = import('react').ReactElement<unknown>
export type CreateElementLike = (
  name: any,
  props: any,
  ...children: ReactNode[]
) => ReactNode
export type SharedOptions = {
  /**
   * How to create elements or components.
   * You should typically pass `React.createElement`.
   */
  createElement: CreateElementLike
  /**
   * Create fragments instead of an outer `<div>` if available.
   * You should typically pass `React.Fragment`.
   */
  Fragment?: ((props: any) => ReactNode) | undefined
  /**
   * React key prefix
   */
  prefix?: string | undefined
}
export type Options = SharedOptions &
  (
    | import('./complex-types').ComponentsWithNodeOptions
    | import('./complex-types').ComponentsWithoutNodeOptions
  )
